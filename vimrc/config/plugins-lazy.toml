[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim-0.5")'

[[plugins]]
repo = 'rebelot/heirline.nvim'
if = 'has("nvim-0.5")'
on_event = 'BufEnter'
depends = [
  'gitsigns.nvim',
  'nvim-navic',
  'vfiler-column-devicons',
]
lua_source = 'require("plugins/heirline").setup()'

[[plugins]]
repo = 'rcarriga/nvim-notify'
if = 'has("nvim-0.5")'
on_lua = 'notify'
lua_source = 'require("notify").setup()'

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = 'FileType'
hook_add = 'let g:cursorword = 0'
hook_source = '''
  augroup user_plugins_cursorword
    autocmd!
    autocmd FileType json,yaml,markdown,nginx,dosini,conf,text
      \ let b:cursorword = 1
    autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
    autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1 |
      \ let b:cursorword = 0 |
      \ endif
    autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0 |
      \ let b:cursorword = 1 |
      \ endif
  augroup END
'''

[[plugins]]
repo = 'romainl/vim-cool'
on_event = ['CursorMoved', 'InsertEnter']

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
if = 'has("nvim-0.5")'
on_ft = 'qf'
on_cmd = 'BqfAutoToggle'
on_event = 'QuickFixCmdPost'
lua_source = '''
  local max_file_size = 100 * 1024 -- 100kb
  require('bqf').setup({
    auto_resize_height = false,
    preview = {
      auto_preview = true,
      should_preview_cb = function(bufnr)
        -- file size greater than 'max_file_size' can't be previewed automatically
        local filename = vim.api.nvim_buf_get_name(bufnr)
        local fsize = vim.fn.getfsize(filename)
        if fsize > max_file_size then
          return false
        end
        return true
      end,
    }
  })
'''

[[plugins]]
repo = 'rmagatti/goto-preview'
if = 'has("nvim-0.5.1")'
depends = ['telescope.nvim']
on_event = 'FileType'
lua_source = '''
  require('goto-preview').setup({
    -- debug = false,
    width = 78,
    height = 15,
    opacity = 10,
    default_mappings = false,
    border = {'╭', '─', '╮', '│', '╯', '─', '╰', '│'},
    post_open_hook = function(_, window)
      vim.api.nvim_win_set_option(window, 'spell', false)
      vim.api.nvim_win_set_option(window, 'signcolumn', 'no')
    end,
  })
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
if = 'has("nvim-0.8.0")'
on_event = 'BufEnter'
lua_source = 'require("gitsigns").setup()'

# Completion and code analysis
#==============================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim-0.7")'
lua_post_source = 'require("plugins/lspconfig").setup()'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'mason-org/mason-registry'

[[plugins]]
repo = 'williamboman/mason.nvim'
if = 'has("nvim-0.7")'
depends = ['mason-registry']
on_lua = 'mason'
hook_post_update = ':MasonUpdate'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['nvim-lspconfig', 'mason.nvim']
on_lua = 'mason-lspconfig'

[[plugins]]
repo = 'kosayoda/nvim-lightbulb'
on_lua = 'nvim-lightbulb'

[[plugins]]
repo = 'folke/neodev.nvim'
on_lua = 'neodev'

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'nvimdev/lspsaga.nvim'
on_cmd = 'Lspsage'
on_lua = 'lspsaga'
lua_source = '''
  require('lspsaga').setup({
    ui = {
      border = 'rounded',
    },
    scroll_preview = {
      scroll_down = '<C-f>',
      scroll_up = '<C-b>',
    },
    finder = {
      keys = {
        toggle_or_open = 'o',
        vsplit = 'v',
        split = 's',
        quit = {'q', '<Esc>'},
      },
    },
    code_action = {
      keys = {
        quit = {'q', '<Esc>'},
        exec = '<CR>',
      },
    },
    rename = {
      keys = {
        quit = {'<C-c>', '<Esc>'},
      },
    },
    symbol_in_winbar = {
      enable = false,
    },
  })
'''

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
if = 'has("nvim-0.7")'
on_source = 'nvim-lspconfig'
depends = ['plenary.nvim', 'nvim-lspconfig']
lua_post_source = 'require("plugins/null-ls").setup()'

[[plugins]]
repo = 'SmiteshP/nvim-navic'
if = 'has("nvim-0.7")'
depends = ['nvim-lspconfig']
on_lua = 'nvim-navic'
lua_source = 'require("nvim-navic").setup()'

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
if = 'has("nvim-0.5")'
on_event = ['InsertEnter', 'CmdlineEnter']
depends = [
  'nvim-autopairs',
  'nvim-lspconfig',
  'vim-vsnip'
]
lua_post_source = 'require("plugins/cmp").setup()'

[[plugins]]
repo = 'andersevenrud/cmp-tmux'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-emoji'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lua'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
merged = 0
hook_add = '''
  let g:vsnip_snippet_dir = expand('$VIM_PATH/snippets')
  let g:vsnip_filetypes = {}
  let g:vsnip_filetypes.javascriptreact = ['javascript']
  let g:vsnip_filetypes.typescriptreact = ['typescript']
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'vim-vsnip'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
merged = 0
on_source = 'vim-vsnip'

[[plugins]]
repo = 'windwp/nvim-autopairs'
if = 'has("nvim-0.5")'
on_event = ['InsertEnter']
lua_post_source = 'require("nvim-autopairs").setup()'

[[plugins]]
repo = 'folke/todo-comments.nvim'
if = 'has("nvim-0.8")'
depends = ['plenary.nvim']
on_source = ['telescope.nvim', 'nvim-lspconfig']
lua_source = '''
  require('todo-comments').setup({
    signs = false,
    colors = {
      error =   {'#968583'},
      info =    {'#789da1'},
      hint =    {'#8b9683'},
      default = {'#6ca6ad'}
    },
  })
'''

[[plugins]]
repo = 'folke/trouble.nvim'
if = 'has("nvim-0.5")'
on_cmd = ['Trouble', 'TroubleToggle']

[[plugins]]
repo = 'sindrets/diffview.nvim'
if = 'has("nvim-0.5")'
on_cmd = ['DiffviewOpen', 'DiffviewFileHistory']
lua_post_source = 'require("plugins/diffview").setup()'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
rev = '0.1.x'
if = 'has("nvim-0.7")'
depends = ['plenary.nvim']
on_cmd = 'Telescope'
on_lua = 'telescope'
lua_post_source = 'require("plugins/telescope").setup()'

[[plugins]]
repo = 'nvim-telescope/telescope-ui-select.nvim'
if = 'has("nvim-0.7")'
depends = ['telescope.nvim']
on_lua = 'telescope'
lua_post_source = 'require("telescope").load_extension("ui-select")'

[[plugins]]
repo = 'simrat39/symbols-outline.nvim'
if = 'has("nvim-0.7")'
on_cmd = ['SymbolsOutline', 'SymbolsOutlineOpen']
lua_source = '''
  require('symbols-outline').setup({
    highlight_hovered_item = true,
    show_guides = true,
    show_number = true,
    auto_preview = false,
    position = 'right',
    width = 30,
    keymaps = {
      clase = {'<Esc>', 'q'},
      goto_location = '<CR>',
      focus_location = 'o',
      hover_symbol = 'K',
      toggle_preview = 'p',
      rename_symbol = 'r',
      code_actions = 'a',
    },
  })

  vim.cmd([[
    augroup user-symbols-outline
      autocmd!
      autocmd FileType Outline setlocal cursorline
      autocmd WinEnter,BufEnter Outline setlocal cursorline
      autocmd WinLeave,BufLeave Outline setlocal nocursorline
    augroup END
  ]])
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
on_ft = ['html', 'css', 'vue', 'javascript', 'javascriptreact', 'svelte']
hook_source = '''
  let g:user_emmet_mode = 'i'
  let g:user_emmet_install_global = 0
  let g:user_emmet_install_command = 0
  let g:user_emmet_complete_tag = 0
'''

[[plugins]]
repo = 'folke/which-key.nvim'
if = 'has("nvim-0.5.0")'
on_cmd = 'WhichKey'
lua_source = '''
  require('which-key').setup({
    icons = {
      breadcrumb = '»',
      separator = '  ',
      group = '+',
    },

    popup_mappings = {
      scroll_down = '<C-d>',
      scroll_up   = '<C-u>',
    },

    window = {
      border = 'single',
    },

    layout = {
      spacing = 4,
    },

    hidden = {
      '<silent>',
      '<cmd>',
      '<Cmd>',
      '<CR>',
      'call',
      'lua',
      '^:',
      '^ ',
    },
  })
'''

# Filer
#=======
[[plugins]]
repo = 'obaland/vfiler.vim'
on_cmd = 'VFiler'
on_lua = 'vfiler'
depends = ['vfiler-column-devicons']
lua_source = 'require("plugins/vfiler").setup()'

[[plugins]]
repo = 'obaland/vfiler-column-devicons'

# Syntax
#========
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim-0.7")'
on_event = 'BufRead'
on_cmd = ['TSUpdate', 'TSInstall', 'TSInstallInfo', 'TSModuleInfo', 'TSConfigInfo']
hook_post_update = ':TSUpdate'
lua_source = 'require("plugins/treesitter").setup()'

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = ['nvim-treesitter']
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
on_source = 'nvim-treesitter'
lua_source = 'vim.g.skip_ts_context_commentstring_module = true'

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
on_source = 'nvim-treesitter'

# Operators and text objects
#============================
[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = {nxo = ['<Plug>(sandwich-', '<Plug>(operator-sandwich-,', '<Plug>(textobj-sandwich-']}
hook_add = 'let g:sandwich_no_default_key_mappings = 1'

[[plugins]]
repo = 'AndrewRadev/sideways.vim'
on_cmd = ['SidewaysLeft', 'SidewaysRight', 'SidewaysJumpLeft', 'SidewaysJumpRight']
on_map = {xo = ['<Plug>Sideways']}

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffAdd']

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = ['SplitjoinJoin', 'SplitjoinSplit']
hook_add = '''
  let g:splitjoin_join_mapping = ""
  let g:splitjoin_split_mapping = ""
  autocmd user_events FileType go let b:splitjoin_trailing_comma = 1
'''

[[plugins]]
repo = 'AndrewRadev/dsf.vim'
on_map = {n = '<Plug>Dsf'}
hook_add = 'let g:dsf_no_mappings = 1'

# Utility
#=========
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_cmd = 'MarkdownPreview'
hook_post_source = 'call mkdp#util#install()'

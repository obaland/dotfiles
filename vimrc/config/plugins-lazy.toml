[[plugins]]
repo = 'obaland/plenary.nvim'
if = 'has("nvim-0.5")'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

# Interface
# =========
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
if = 'has("nvim-0.5")'
on_event = 'BufEnter'
depends = [
  'nvim-navic',
  'nvim-web-devicons',
  'vfiler.vim'
]
hook_source = 'lua require("plugins/lualine").setup()'

[[plugins]]
repo = 'rcarriga/nvim-notify'
if = 'has("nvim-0.5")'
on_lua = 'notify'
hook_source = 'lua require("notify").setup()'

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = ['FileType']
hook_add = 'let g:cursorword = 0'
hook_source = '''
  augroup user_plugins_cursorword
    autocmd!
    autocmd FileType json,yaml,markdown,nginx,dosini,conf,text
      \ let b:cursorword = 1
    autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
    autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1 |
      \ let b:cursorword = 0 |
      \ endif
    autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0 |
      \ let b:cursorword = 1 |
      \ endif
  augroup END
'''

[[plugins]]
repo = 'romainl/vim-cool'
on_event = ['CursorMoved', 'InsertEnter']

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
if = 'has("nvim-0.5")'
on_ft = ['qf']
on_cmd = ['BqfAutoToggle']
on_event = ['QuickFixCmdPost']
hook_source = 'lua require("plugins/bqf").setup()'

[[plugins]]
repo = 'rmagatti/goto-preview'
if = 'has("nvim-0.5.1")'
depends = ['telescope.nvim']
on_event = ['FileType']
hook_post_source = 'lua require("plugins/goto-preview").setup()'

# Completion and code analysis
# ============================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim-0.7")'
on_ft = [
  'c',
  'cpp',
  'cs',
  'css',
  'go',
  'html',
  'java',
  'javascript',
  'json',
  'lua',
  'make',
  'markdown',
  'php',
  'python',
  'ruby',
  'toml',
  'vim',
  'xml',
  'yaml'
]
hook_post_source = 'lua require("plugins/lspconfig").setup()'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['mason.nvim']
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'kosayoda/nvim-lightbulb'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'glepnir/lspsaga.nvim'
on_source = 'nvim-lspconfig'
hook_post_source = 'lua require("plugins/lspsaga").setup()'

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
if = 'has("nvim-0.7")'
on_source = 'nvim-lspconfig'
depends = ['plenary.nvim', 'nvim-lspconfig']
hook_post_source = 'lua require("plugins/null-ls").setup()'

[[plugins]]
repo = 'SmiteshP/nvim-navic'
if = 'has("nvim-0.7")'
on_source = 'nvim-lspconfig'
hook_post_source = 'lua require("plugins/navic").setup()'

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
if = 'has("nvim-0.5")'
on_event = ['InsertEnter', 'CmdlineEnter']
depends = [
  'nvim-autopairs',
  'nvim-lspconfig',
  'vim-vsnip'
]
hook_post_source = 'lua require("plugins/cmp").setup()'

[[plugins]]
repo = 'andersevenrud/cmp-tmux'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-emoji'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lua'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
merged = 0
hook_add = '''
  let g:vsnip_snippet_dir = expand('$VIM_PATH/snippets')
  let g:vsnip_filetypes = {}
  let g:vsnip_filetypes.javascriptreact = ['javascript']
  let g:vsnip_filetypes.typescriptreact = ['typescript']
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'vim-vsnip'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
merged = 0
on_source = 'vim-vsnip'

[[plugins]]
repo = 'windwp/nvim-autopairs'
if = 'has("nvim-0.5")'
hook_post_source = 'lua require("nvim-autopairs").setup()'

[[plugins]]
repo = 'folke/todo-comments.nvim'
if = 'has("nvim-0.5")'
depends = ['plenary.nvim']
on_source = ['telescope.nvim', 'nvim-lspconfig']
hook_post_source = 'lua require("plugins/todo-comments").setup()'

[[plugins]]
repo = 'folke/trouble.nvim'
if = 'has("nvim-0.5")'
on_cmd = ['Trouble', 'TroubleToggle']

[[plugins]]
repo = 'sindrets/diffview.nvim'
if = 'has("nvim-0.5")'
on_cmd = ['DiffviewOpen', 'DiffviewFileHistory']
hook_post_source = 'lua require("plugins/diffview").setup()'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
rev = '0.1.x'
if = 'has("nvim-0.7")'
depends = ['plenary.nvim']
on_cmd = 'Telescope'
on_lua = 'telescope'
hook_post_source = 'lua require("plugins/telescope").setup()'

[[plugins]]
repo = 'nvim-telescope/telescope-ui-select.nvim'
if = 'has("nvim-0.7")'
depends = ['telescope.nvim']
on_lua = 'telescope'
hook_post_source = 'lua require("telescope").load_extension("ui-select")'

[[plugins]]
repo = 'simrat39/symbols-outline.nvim'
if = 'has("nvim-0.7")'
on_cmd = ['SymbolsOutline', 'SymbolsOutlineOpen']
hook_source = 'lua require("plugins/symbols-outline").setup()'

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = ['InsertEnter']
on_ft = ['html', 'css', 'vue', 'javascript', 'javascriptreact', 'svelte']
hook_source = '''
  let g:user_emmet_mode = 'i'
  let g:user_emmet_install_global = 0
  let g:user_emmet_install_command = 0
  let g:user_emmet_complete_tag = 0
'''

[[plugins]]
repo = 'folke/which-key.nvim'
if = 'has("nvim-0.5.0")'
on_cmd = ['WhichKey']
hook_post_source = 'lua require("plugins/which-key")'

# Filer
# =====
[[plugins]]
repo = 'obaland/vfiler.vim'
on_cmd = 'VFiler'
on_lua = 'vfiler'
hook_source = 'lua require("plugins/vfiler").setup()'

[[plugins]]
repo = 'obaland/vfiler-column-devicons'
depends = ['vfiler.vim']
on_source = 'vfiler.vim'

# Syntax
# ======
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim-0.7")'
on_event = 'BufRead'
on_cmd = ['TSUpdate', 'TSInstall', 'TSInstallInfo', 'TSModuleInfo', 'TSConfigInfo']
hook_post_update = ':TSUpdate'
hook_source = 'lua require("plugins/treesitter").setup()'

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = ['nvim-treesitter']
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
on_source = 'nvim-treesitter'

# Operators and text objects
# ==========================
[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = {nxo = ['<Plug>(sanwich-', '<Plug>(operator-sandwich-,', '<Plug>(textobj-sandwich-']}
hook_add = 'let g:sandwich_no_default_key_mappings = 1'

[[plugins]]
repo = 'AndrewRadev/sideways.vim'
on_cmd = ['SidewaysLeft', 'SidewaysRight', 'SidewaysJumpLeft', 'SidewaysJumpRight']
on_map = {xo = ['<Plug>Sideways']}

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffAdd']

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = ['SplitjoinJoin', 'SplitjoinSplit']
hook_add = '''
  let g:splitjoin_join_mapping = ""
  let g:splitjoin_split_mapping = ""
  autocmd user_events FileType go let b:splitjoin_trailing_comma = 1
'''

[[plugins]]
repo = 'AndrewRadev/dsf.vim'
on_map = {n = '<Plug>Dsf'}
hook_add = 'let g:dsf_no_mappings = 1'

# Utility
# =======
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_cmd = 'MarkdownPreview'
hook_post_source = 'call mkdp#util#install()'

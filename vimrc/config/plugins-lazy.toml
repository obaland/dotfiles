[[plugins]]
repo = 'rebelot/heirline.nvim'
if = 'has("nvim-0.5")'
on_event = 'BufEnter'
depends = [
  'gitsigns.nvim',
  'nvim-navic',
  'vfiler-column-devicons',
]
lua_source = 'require("plugins/heirline").setup()'

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = 'FileType'
hook_add = 'let g:cursorword = 0'
hook_source = '''
  augroup user_plugins_cursorword
    autocmd!
    autocmd FileType json,yaml,markdown,nginx,dosini,conf,text
      \ let b:cursorword = 1
    autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
    autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1 |
      \ let b:cursorword = 0 |
      \ endif
    autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0 |
      \ let b:cursorword = 1 |
      \ endif
  augroup END
'''

[[plugins]]
repo = 'romainl/vim-cool'
on_event = ['CursorMoved', 'InsertEnter']

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
if = 'has("nvim-0.5")'
on_ft = 'qf'
on_cmd = 'BqfAutoToggle'
on_event = 'QuickFixCmdPost'
lua_source = '''
  local max_file_size = 100 * 1024 -- 100kb
  require('bqf').setup({
    auto_resize_height = false,
    preview = {
      auto_preview = true,
      should_preview_cb = function(bufnr)
        -- file size greater than 'max_file_size' can't be previewed automatically
        local filename = vim.api.nvim_buf_get_name(bufnr)
        local fsize = vim.fn.getfsize(filename)
        if fsize > max_file_size then
          return false
        end
        return true
      end,
    }
  })
'''

# Completion and code analysis
#=============================================================================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim-0.7")'
on_event = 'BufEnter'
lua_post_source = 'require("plugins/lspconfig").setup()'

[[plugins]]
repo = 'williamboman/mason.nvim'
if = 'has("nvim-0.7")'
on_source = 'nvim-lspconfig'
lua_source = '''
  require("mason").setup({
		ui = {
      border = "rounded",
			icons = {
				package_installed = "✓",
				package_pending = "➜",
				package_uninstalled = "✗",
			},
		},
  })
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['nvim-lspconfig', 'mason.nvim']
on_lua = 'mason-lspconfig'

[[plugins]]
repo = 'kosayoda/nvim-lightbulb'
on_lua = 'nvim-lightbulb'

[[plugins]]
repo = 'folke/neodev.nvim'
on_lua = 'neodev'

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
on_source = 'nvim-lspconfig'
lua_source = 'require("lsp_signature").setup({})'

[[plugins]]
repo = 'nvimtools/none-ls.nvim'
if = 'has("nvim-0.7")'
on_source = 'nvim-lspconfig'
depends = ['plenary.nvim']
lua_post_source = 'require("plugins/none-ls").setup()'

[[plugins]]
repo = 'SmiteshP/nvim-navic'
if = 'has("nvim-0.7")'
on_source = 'nvim-lspconfig'
lua_source = 'require("nvim-navic").setup()'

[[plugins]]
repo = 'stevearc/aerial.nvim'
if = 'has("nvim-0.8")'
depends = ['nvim-lspconfig', 'nvim-treesitter', 'telescope.nvim']
on_cmd = ['AerialToggle', 'AerialNavToggle', 'Telescope']
on_lua = 'nvim-lspconfig'
lua_source = '''
  require('aerial').setup({
    close_on_select = true,
    keymaps = {
      ['<Esc>'] = 'actions.close',
    },
    nav = {
      preview = true,
      keymaps = {
        ['q'] = 'actions.close',
        ['<Esc>'] = 'actions.close',
      }
    }
  })

  -- Load extensions for telescope.nvim
  require('telescope').load_extension('aerial')
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
if = 'has("nvim-0.5")'
on_event = ['InsertEnter', 'CmdlineEnter']
depends = [
  'nvim-autopairs',
  'nvim-lspconfig',
  'LuaSnip'
]
lua_post_source = 'require("plugins/cmp").setup()'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'andersevenrud/cmp-tmux'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-emoji'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lua'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'saadparwaiz1/cmp_luasnip'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'windwp/nvim-autopairs'
if = 'has("nvim-0.5")'
on_event = ['InsertEnter']
lua_post_source = '''
require("nvim-autopairs").setup({
  fast_wrap = {},
  disable_filetype = {
    'TelescopePrompt',
    'vim',
  },
})
'''

[[plugins]]
repo = 'folke/todo-comments.nvim'
if = 'has("nvim-0.8")'
depends = ['plenary.nvim', 'trouble.nvim', 'telescope.nvim']
on_cmd = ['TodoTrouble', 'TodoTelescope']
lua_source = '''
  require('todo-comments').setup({
    signs = false,
    colors = {
      error =   {'#968583'},
      info =    {'#789da1'},
      hint =    {'#8b9683'},
      default = {'#6ca6ad'}
    },
  })
'''

[[plugins]]
repo = 'folke/trouble.nvim'
if = 'has("nvim-0.5")'
on_cmd = ['Trouble', 'TroubleToggle']

[[plugins]]
repo = 'sindrets/diffview.nvim'
if = 'has("nvim-0.5")'
on_cmd = ['DiffviewOpen', 'DiffviewFileHistory']
lua_post_source = 'require("plugins/diffview").setup()'

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
on_ft = ['html', 'css', 'vue', 'javascript', 'javascriptreact', 'svelte']
hook_source = '''
  let g:user_emmet_mode = 'i'
  let g:user_emmet_install_global = 0
  let g:user_emmet_install_command = 0
  let g:user_emmet_complete_tag = 0
'''

[[plugins]]
repo = 'folke/which-key.nvim'
if = 'has("nvim-0.5.0")'
on_cmd = 'WhichKey'
lua_source = '''
  require('which-key').setup({
    icons = {
      breadcrumb = '»',
      separator = '  ',
      group = '+',
    },

    popup_mappings = {
      scroll_down = '<C-d>',
      scroll_up   = '<C-u>',
    },

    window = {
      border = 'single',
    },

    layout = {
      spacing = 4,
    },

    hidden = {
      '<silent>',
      '<cmd>',
      '<Cmd>',
      '<CR>',
      'call',
      'lua',
      '^:',
      '^ ',
    },
  })
'''

# Operators and text objects
#=============================================================================
[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = {nxo = ['<Plug>(sandwich-', '<Plug>(operator-sandwich-,', '<Plug>(textobj-sandwich-']}
hook_add = 'let g:sandwich_no_default_key_mappings = 1'

[[plugins]]
repo = 'AndrewRadev/sideways.vim'
on_cmd = ['SidewaysLeft', 'SidewaysRight', 'SidewaysJumpLeft', 'SidewaysJumpRight']
on_map = {xo = ['<Plug>Sideways']}

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffAdd', 'LinediffShow', 'LinediffReset']

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = ['SplitjoinJoin', 'SplitjoinSplit']
hook_add = '''
  let g:splitjoin_join_mapping = ""
  let g:splitjoin_split_mapping = ""
  autocmd user_events FileType go let b:splitjoin_trailing_comma = 1
'''

[[plugins]]
repo = 'AndrewRadev/dsf.vim'
on_map = {n = '<Plug>Dsf'}
hook_add = 'let g:dsf_no_mappings = 1'

# Utility
#=============================================================================
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_cmd = 'MarkdownPreview'
hook_post_source = 'call mkdp#util#install()'
